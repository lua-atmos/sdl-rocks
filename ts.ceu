local SHIP_FRAMES      = 4
local SHIP_ACC_DIV     = 10
local SHIP_VEL_MAX  = {W/2.5, H/2.5}
local SHOT_DIM      = {W/50, H/100}
local SHOT_COLOR    = {0xFF,0xFF,0x88,0xFF}
local METEOR_FRAMES = 6
local METEOR_AWAIT  = 5000

function random_signal ()
    return (random.bool() and 1) or -1
end

function Meteor ()
    local path = "imgs/meteor.gif"
    local y_sig = random_signal()

    local vx = (1 + (random.int(WIN.w/5))) * random_signal()
    local vy = (1 + (random.int(WIN.h/5))) * y_sig

    local dim = pico.get.image.size(path)
    local w = dim.w / METEOR_FRAMES
    local dx = 0

    local x = random.int(WIN.w)
    local y = (y_sig == 1) and 0 or WIN.h
    me().rect = {{x,y}, {w,dim.h}}

    par_or(function ()
        local dt = random.int(1, METEOR_AWAIT)
        await(clock{ms=dt})
        par_or(function ()
            await(spawn (Move_T, pub.rect, {vx,vy}))
        end, function ()
            await('collided')
            pico.output.sound("snds/meteor.wav")
        end)
    end, function ()
        every('sdl.draw', function ()
            pico.set.image.crop([[dx,0],[w,dim.h]])
            pico.output.draw.image(pub.rect.pos, path)
        end)
    end, function ()
        local v = ((vx^2) + (vy^2)) ^ (1/2)
        local x = 0
        every('step', function ()
            x = x + ((v * it.ms) / 1000)
            dx = (x % dim.w) - (x % pub.rect.dim.w)
        end)
    end)
    --pub
end

function Shot (tp, pos, vy)
    pico.output.sound("snds/shot.wav")
    me().tag = tp
    me().rect = { pos, SHOT_DIM }
    par_or(function ()
        await('collided')
    end, function ()
        local sig = (tp=='Shot.L' and 1) or -1
        await(spawn (Move_T, pub.rect, {(WIN.w/3)*sig, vy}))
    end, function ()
        every('sdl.draw', function ()
            pico.set.color.draw(SHOT_COLOR)
            pico.output.draw.rect(pub.rect)
        end)
    end)
    --pub
end

function Ship (tp, pos, ctl, shots, path)
    local dim = pico.get.image.size(path)
    local vel = {0,0}
    local dy = dim.h / SHIP_FRAMES
    me().tag = tp
    me().rect = {pos, {dim.w,dy}}

    local acc = {0,0}
    local key
    spawn(function ()
        par(function ()
            every(SDL.event.KeyDown, function ()
                if false then
                elseif it.key == ctl.mov.left then
                    acc.x = -WIN.w/SHIP_ACC_DIV
                elseif it.key == ctl.mov.right then
                    acc.x =  WIN.w/SHIP_ACC_DIV
                elseif it.key == ctl.mov.up then
                    acc.y = -WIN.h/SHIP_ACC_DIV
                elseif it.key == ctl.mov.down then
                    acc.y =  WIN.h/SHIP_ACC_DIV
                elseif it.key == ctl.shot then
                    local tpx = ((tp == 'Ship.L') and 'Shot.L') or 'Shot.R'
                    spawn_in(shots, Shot, tpx, copy(pos), vel.y)
                end
                key = it.key
            end)
        end, function ()
            every(SDL.event.KeyUp, function ()
                key = nil
                acc = {0,0}
            end)
        end)
    end)

    par_or(function ()
        await('collided')
    end, function ()
        every('sdl.draw', function ()
            local frame = 0; do
                if false then
                elseif key == ctl.mov.left then
                    frame = ((tp=='Ship.L') and 0) or 1
                elseif key == ctl.mov.right then
                    frame = ((tp=='Ship.R') and 0) or 1
                elseif key == ctl.mov.up then
                    frame = 2
                elseif key == ctl.mov.down then
                    frame = 3
                end
            end
            pico.set.image.crop([[0,frame*dy],[dim.w,dy]])
            pico.output.draw.image(pos, path)
        end)
    end, function ()
        every('step', function ()
            local dt = it.ms / 1000
            vel.x = math.between(-SHIP_VEL_MAX.x, vel.x+(acc.x*dt), SHIP_VEL_MAX.x)
            vel.y = math.between(-SHIP_VEL_MAX.y, vel.y+(acc.y*dt), SHIP_VEL_MAX.y)
            if tp == 'Ship.L' then
                pos.x = math.between(0, pos.x+(vel.x*dt), WIN.w/2)
            else
                pos.x = math.between(WIN.w/2, pos.x+(vel.x*dt), WIN.w)
            end
            pos.y = math.between(0, pos.y+(vel.y*dt), WIN.h)
        end)
    end)

    pico.output.sound("snds/explosion.wav")
    watching(clock{ms=150}, function ()
        local d = dy / 2;
        par(function ()
            every('step', function ()
                d = d + (((40*d)*it.ms)/1000)
            end)
        end, function ()
            every('sdl.draw', function ()
                pico.set.color.draw({0xFF,0x00,0x00,0xFF})
                pico.output.draw.oval({pos,{d,d}})
            end)
        end)
    end)
end
